    1. Related model:
- one to one: hasOne(), belongsTo()
- one to many: hasMany(), belongsTo()
- many to many:  belongsToMany()
+ bảng trung gian: pivot
+ bảng pivot có nhiều thuộc tính hơn: withPivot(‘column1’, ‘column2’), withTimestamps()
+ lọc các quan hệ qua tên cột: wherePivot, wherePivotIn
- has many through: cung cấp đường tắt cho việc truy cập quan hệ xa thông qua quan hệ trung gian
+ vd: 1 country có nhiều bài post
- polymorphic relation: một liên kết có thể thuộc về nhiều hơn một model, morphTo(), morphMany(), lấy chính chủ của một quan hệ đa hình đung commentable
+ morphMap: tùy chỉnh các kiểu đa hình trong boot() trong services provider
- many-to-many polymorphic relation: model post và video có thể chia sẻ liên kết đa hình tới model Tag: morphToMany(), morphedByMany()
    • Query relation
      - has(): giới hạn kết quả trả về trên sự tồn tại của 1 quan hệ → whereHas và orWhereHas, doesntHave, whereDoesntHave
      - withCount(): đếm các kết quả quan hệ
    2. Seeder: seed database với dữ liệu test
    3. Eager Loading Associations: 
khi truy cập eloquent relationship như là các thuộc tính, các dữ liệu là lazy loaded (dữ liệu ko đc load cho đến khi truy cập lần đầu tiên tới thuộc tính). 
eager load các quan hệ tại thời điểm ta truy vấn vào model cha => giảm bớt vấn đề truy vấn N+1
thêm, cập nhật model: save, saveMany, create, createMany
sự khác nhau giữa save, create:
- save: chấp nhận model instance (một biến đã được gán giá trị)
- create: chấp nhận array
Cập nhận relation:
- belongTo: associate, disassociate
       - many-to-many: attach, detach
    4. Scope
    a) Global scope: thêm các constraint vào tất cả các truy vấn cho một model
       - viết mã cho một hàm: apply
       - Để gán một global scope cho một model, bạn cần ghi đè lại hàm boot và sử dụng hàm addGlobalScope: 
    b) Local scope: định nghĩa tập hợp các ràng buộc chung mà bạn có thể tái sử dụng
    c) trong ứng dụng của bạn.
    5. Accessor & mutator: format các attributs của eloquent khi lấy ra hoặc set giá trị cho chúng
    6. Eloquent:
    • ORM (Object Relational Mapping) là một kỹ thuật lập trình dùng để chuyển đổi dữ liệu giữa một hệ thống không hướng đối tượng như cơ sở dữ liệu sang hệ thống hướng đối tượng như lập trình hướng đôi tượng trong PHP
    • cung cấp một API ActiveRecord đơn giản và tuyệt vời khi làm việc với database
    • mỗi table có một model để tương tác, cho phép truy vấn hoặc chèn dữ liệu
    • all và get đều trả về nhiều kết quả, một instance từ Illuminate\Database\Eloquent\Collection sẽ được trả về. Class Collection cung cấp các hàm hữu íchcho phép làm việc với các kết quả Eloquent:
    • hàm chunk sẽ tiết kiệm được memory khi thao tác với tập dữ liệu kết quả lớn, sẽ lấy từng "chunk" của Eloquent models, cung cấp chúng thông qua Closure để xử lý.
    • hàm cursor có thể được sử dụng để giảm memory sử dụng, cho phép bạn duyệt qua records bằng cách sử dụng một cursor
    • find, first trả về một model instance
    • firstOrFail sẽ trả lại kết quả đầu tiên của query. Tuy nhiên, nếu không có kết quả, thì Illuminate\Database\Eloquent\ModelNotFoundException sẽ được ném ra
    • hàm aggregate trả về một kết quả
    • mass update:
    • mass assignment:
      + hàm create để tạo một model mới chỉ trong một dòng
      + $fillable: khai báo thuộc tính bạn muốn cho phép mass-assignment
      + $guarded để lưu các thuộc tính mà không được phép mass-assign
    • create:
      + firstOrCreate: tìm ko thấy thì tạo
      + firstOrNew: tương tự nhưng ko save phải save()
    • + updateOrCreate
    • xóa:
      + delete(): 
      + destroy(): xoá model mà không cần lấy nó ra
      + softDeletes(): When models are soft deleted, they are not actually removed from your database. Instead, a deleted_at attribute is set on the model and inserted into the database
      + function: trashed, withTrashed, onlyTrashed, restore, forceDelete
    7. Migration
    • xây dựng cấu trúc cho database schema
    • cho phép team có thể dễ dàng thay đổi và chia sẻ schema của database trong chương trình với nhau
    • up được dùng để tạo table, cột hay index mới vào trong database
    8. Middleware: phần nằm giữa client và server, xử lý các request/response vào/ra server của client. filtering HTTP các requests
    9. Restful: 
    • REST dựa vào các verb của HTTP để truyền và nhập dữ liệu giữa client và server, cùng một URL sẽ ra các endpoint khác nhau
       + Đối với một trang web bình thường (ví dụ như là wordpress chẳng hạn), khi web browser gửi một request thông qua cái url như trên thì Server sẽ xử lý và trả về một trang HTML, sau đó web browser nhận và hiển thị trang HTML này ra
    • đối với Restful thì client là browser, mobile app hoặc webservice, dữ liệu truyền nhận qua lại chủ yếu là JSON
       + mối quan hệ giữ Client và Server lúc này là Stateless, có nghĩa là Server không cần biết Client là ai, Server cũng không cần phải lưu session đối với client giống như website “truyền thống”. Server lúc này chỉ cần biết là: à, có một request tới và thỏa một số điều kiện của mình (cần access token chẳng hạn), và mình xử lý và trả dữ liệu cho Client thôi
    • quy tắc REST tuân thủ:
    • Sự nhất quán trong API.
    • Kết nối không trạng thái, không cần thông tin phiên làm việc phía máy chủ.
    • Sử dụng các mã trạng thái của HTTP
    • Sử dụng đường dẫn web URL có phân cấp logic.
    • Đánh phiên bản trong URL chứ không đưa vào HTTP header.
    10.  Route And Resource Controller
    • định tuyến requests đến controller phù hợp
    • web.php: định nghĩa route cho giao diện web, thuộc nhóm middleware web, cung cấp các tính năng như session và bảo mật CSRF
    • api.php: nhóm middleware api (stateless)
    • format route parameters use where or define in boot method of RouteServiceProvider: Route::pattern('id', '[0-9]+');
    • route group: share route attributes (middleware, namespace, subdomain ({account}.myapp.com), prefix, route name prefix)
    • route model binding: tự động inject trực tiếp model
    • implicit: tự động giải quyết gợi ý eloquent model, tùy biến tên khóa với getRouteKeyName
    • explicit: phương thức boot của RouteServiceProvider
      Route::model('user', App\User::class);
    • truy cập route hiện tại: current, currentRouteName, currentRouteAction
    11. Transaction: thực thi một tập hợp các xử lý trên CSDL
    • thành công thì tự động được commit
    • error thì sẽ rollback lại từ đầu
    12.  Authentication: xác thựu người dùng, ai đang sử dụng hệ thống và điều hướng thành viên đến các tài nguyên khác nhau
    13.  Authorization: cấp quyền và điều khiển việc truy cập vào tài nguyên
    • Gate: authorize các action riêng lẻ, định nghĩa trong boot method của AuthServiceProvider (define, allows, denies, forUser)
    • Policy: định nghĩa rule liên quan đến một model or resource cụ thể\
      ex: Tạo 1 PostPolicy tương ứng với model Post để quản lý quyền cơ bản "CRUD" cho user
    14.  Localization: hỗ trợ web đa ngôn ngữ, tiện lợi lấy chuỗi dữ liệu từ các ngôn ngữ khác nhau
    15.  Namespace: định danh, tạo khung gian tên cho class cụ thể tránh trường hợp trùng tên
    16.  Helper: hàm tiện ích được tích hợp sẵn mà bạn có thể gọi từ bất cứ nơi nào trong ứng dụng của bạn
    17.  CSRF protection
    • CSRF (Cross Site Request Forgery) là kĩ thuật tấn công bằng cách sử dụng quyền chứng thực của người sử dụng đối với 1 website khác. Các ứng dụng web hoạt động theo cơ chế nhận các câu lệnh HTTP từ người sử dụng, sau đó thực thi các câu lệnh này.
    • Trong trường hợp phiên làm việc của người dùng chưa hết hiệu lực thì các câu lệnh trên sẽ được thực hiện với quyền chứng thực của người sử dụng.
    • Hạn chế thời gian hiệu lực của SESSION
    • Sử dụng captcha
    • Sử dụng token
    • Sử dụng cookie riêng biệt cho trang quản trị
    18. AJAX: một bộ công cụ cho phapes load dữ liệu từ server mà không yêu cầu tải lại trang, sử dụng chức năng sẵn có XMLHttpRequest(XHR) của trình duyệt để thực hiện một yêu cầu đến server và xử lý dữ liệu từ server trả về
    • url: đường dẫn tới file cần lấy và trả về dữ liệu
    • type: post, get
    • data: truyền dữ liệu sang đường dẫn chỉ định để thực hiện xử lý và trả về dữ liệu
    • success: $('#noidung').html(ketqua);
    19.  Model Event:
    • mỗi Eloquent Model có thể tạo ra nhiều sự kiện khác nhau, cho phép chúng ta thao tác với những thời điểm khác nhau trong chu kỳ hoạt động của model đó: creating, created, updating, updated, saving, saved, deleting, deleted, restoring và restored
    • ex: xóa toàn bộ những bài viết của một người dùng khi người dùng đó bị xóa khỏi hệ thống, muốn ghi lại những hoạt động của một người dùng nào đ
    • Tên của các phương thức trên cho chúng ta biết sự kiện nào sẽ được thực hiện và được thực hiện tại thời điểm nào
    • + sử dụng phương thức deleting của model User trong một ServiceProvider chẳng hạn như AppServiceProvider có sẵn cùng với Laravel Framework
    • + ghi đè phương thức boot của class Illuminate\Database\Eloquent\Model bên trong User model
    • +  Model Observer: các logic liên quan đến việc xử lý các sự kiện sẽ được lưu vào một class riêng biệt, Đăng ký Observer class trong EventServiceProvider
    20.  Background Job:  quản lý một Jobs được dễ dàng hơn theo ý muốn của mình qua các hàm 
       - release(): thời gian job có hiệu lực
       - delay(): trì hoãn job trong vòng bao nhiêu giâu bạn muốn
       - attempts(): kiểm tra số lần thử được thực hiện
       - hàm handle được gọi khi job được queue xử lý
       Ex: send một mail nhắc nhở từ hệ thống bán hàng đến người quản trị là đã có người đặt hàng thành công 
    21.  Cron Job: Schedule, Command
       Là một trình nền lập lịch nhiệm vụ được lên lịch trước và chạy các shell commands ở những khoản thời gian nhất định
    22.  Unitest:
	UT là kỹ thuật kiểm nghiệm các hoạt động của mọi chi tiết trong code với một quy trình tách biệt với quy trình phát triển phần mềm, giúp phát hiện sai sót kịp thời. 
	UT có các đặc điểm sau:
		Đóng vai trò như những người sử dụng đầu tiên của hệ thống.
		Chỉ có giá trị khi chúng có thể phát hiện các vấn đề tiềm ẩn hoặc lỗi kỹ thuật.
	UT có 3 trạng thái cơ bản:
		Fail (trạng thái lỗi)
		Ignore (tạm ngừng thực hiện)
		Pass (trạng thái làm việc)
    23.  Magic Function, Trait, Closure, Composer
	Magic function: sẽ không được lập trình viên gọi trực tiếp mà được PHP gọi 1 cách tự động theo một cơ chế "ma thuật" nào đó được quy định sẵn. __construct() được gọi tự động khi bạn khởi tạo 1 object mới, còn __toString() được gọi tự động khi bạn muốn object của mình hoạt động như một string (ví dụ echo $object)
	Good: 1 là làm code của bạn sáng sủa và ngắn gọn hơn,  2 là cung cấp khả năng viết code trong code
	TRait: có thể hiểu như một class là nơi tập hợp một nhóm method mà chúng ta sử dụng trong class khác và chúng ta không thể tạo một đối tượng từ trait. Đơn giản hơn là copy và pass code giữa các class. Khác với abstract là ko thể thừa kế. Với interface: đối tượng có thể làm việc này, với trait: đối tượng có khả năng làm việc này
	Good: giảm lặp code, tránh kế thừa nhiều tầng, định nghĩa ngắn gọn
	Closure có các tính chất của Anonymous Function đó chính là không cần tên định danh cho nó. Nhưng để được gọi là Closure thì trong nó phải sử dụng ít nhất là một biến không phụ thuộc vào phạm vi hàm mà chúng ta định nghĩa.
	Composer là công cụ quản lý các thư viện trong PHP
	View Composer là callbaxk hoặc class phương thức được gọi khi một view được render. Nếu bạn có dữ liệu và muốn ràng buộc chứng tại thời điểm view được render, cho phép hỗ trợ các render bên trong view
    24.  Authentication Via Social login
    25.  Service Container
    26.  Service Provider
    27.  Facade
    28.  Repository Design Pattern:
	design pattern là kỹ thuật lập trình cung cấp mẫu thiết kế để áp dụng vào trường hợp cụ thể
	repository pattern là một design pattern, là lớp trung gian giữa bussiness logic và data access giúp cho việc truy cập dữ liệu chặt chẽ và bảo mật hơn
	repository là một lớp kết nối giữa tầng business và model của ứng dụng
	Good:
	- các phần truy xuất và giao tiếp với database nằm rải rác, muốn thao tác phải tìm code và thuộc tính trong bảng để xử lý
	- thay đổi quyền truy cập dữ liệu, xử lý dữ liệu ở nơi nhất định
	- việc mapping các bảng cũng một nơi xác định
	- tăng tính bảo mật và rõ ràng code
	abstract class tên là EloquentRepository cho driver Eloquent implements từ RepositoryInterface đưa ra các phương thức cơ bản bắt buộc Repository nào cũng phải có (sẽ có nhiều class driver khác nhau để lấy cơ sở dữ liệu như MongoDB, Redis, AWS, v.v..).
    29.  Dependency Injection
    30.  Artisan
    31.  Mailer
    32.  Laravel Mix: hổ trợ biên dịch các tập tin stylesheets hay javascript ở các định dạng khác nhau như: Sass, Less, Stylus, babel, coffee, Coppy files hay directories, Compress hay Combine giữa các file lại với nhau. => giảm kích thước và tối ưu băng thông
    33.  Responsive Design
    34.  Chart
    35.  Sass Or Less
    36. Typescript:
      
Package.json là file cấu hình của npm, giúp cho npm hiểu nó cần phải cài đặt cái gì, thông tin về ứng dụng, phiên bản, …
composer.json là nơi ta khai báo những dependencies dùng trong project, những thông tin về tên, phiên bản, licenses, source …
composer.lock là nơi lưu trữ thông tin về dependencies đã được cài đặt, version 

magic method: bắt sự kiện nào đó khi thao tác với đối tượng
Facades: cho phép bạn truy cập đến các hàm bên trong các service được khai báo trong Service Container bằng cách gọi các hàm static.
 bản chất của Contract là các ... Interface khai báo các core services cung cấp bởi framework.  Contract được sử dụng như một bản tài liệu cho các chức năng của framework.
mã nguồn không bị phụ thuộc quá nhiều vào bất cứ package nào cả, thậm chí cả Laravel. Vì contracts của package không có chứa bất kì triển khai và dependencies nào, bạn có thể dễ dàng viết một triển khai của bất kì contract nào, điều này cho phép bạn thay đổi triển khai cache mà không phải thay đổi mã nguồn của đoạn sử dụng cache nữa.UT là kỹ thuật kiểm nghiệm các hoạt động của mọi chi tiết trong code với một quy trình tách biệt với quy trình phát triển phần mềm, giúp phát hiện sai sót kịp thời. 
